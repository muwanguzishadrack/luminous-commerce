// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  phoneNumber   String
  businessName  String
  role          UserRole  @default(OWNER)
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Organization relationship (required for multi-tenancy)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Password reset tokens
  passwordResetTokens PasswordResetToken[]


  @@unique([email, organizationId])
  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  timezone    String   @default("UTC")
  currency    String   @default("USD")
  isActive    Boolean  @default(true)
  
  // WhatsApp configuration stored in metadata JSON
  metadata    Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  users       User[]

  @@map("organizations")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}


enum UserRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

