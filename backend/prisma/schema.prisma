// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  phoneNumber   String
  businessName  String
  role          UserRole  @default(OWNER)
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Organization relationship (required for multi-tenancy)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Password reset tokens
  passwordResetTokens PasswordResetToken[]

  // WhatsApp relationships
  whatsappMessages WhatsAppMessage[]
  whatsappContacts WhatsAppContact[]

  @@unique([email, organizationId])
  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  timezone    String   @default("UTC")
  currency    String   @default("USD")
  isActive    Boolean  @default(true)
  
  // WhatsApp configuration stored in metadata JSON
  metadata    Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  users       User[]
  messages    WhatsAppMessage[]
  templates   WhatsAppTemplate[]
  contacts    WhatsAppContact[]

  @@map("organizations")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

model WhatsAppMessage {
  id                   String    @id @default(cuid())
  organizationId       String
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Message Details
  wamId                String?   // WhatsApp Message ID from Meta (WAM ID)
  conversationId       String    // Internal conversation ID
  contactId            String?
  contact              WhatsAppContact? @relation(fields: [contactId], references: [id])
  
  // Message Content
  type                 MessageType
  metadata             Json      // Message content and metadata (matches Laravel pattern)
  direction            MessageDirection
  status               MessageStatus @default(PENDING)
  
  // Agent assignment (for outbound messages)
  userId               String?
  user                 User? @relation(fields: [userId], references: [id])
  
  // Media reference
  mediaId              String?
  
  // Meta timestamps
  timestamp            DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("whatsapp_messages")
}

model WhatsAppTemplate {
  id                   String    @id @default(cuid())
  organizationId       String
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Template Details
  metaId               String    // Meta Template ID (matches Laravel pattern)
  name                 String
  language             String
  category             TemplateCategory
  status               TemplateStatus
  
  // Template Content (stored as JSON metadata like Laravel)
  metadata             Json      // Complete template structure
  
  // Tracking
  createdBy            String?   // User who created template
  rejectionReason      String?
  
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@unique([organizationId, metaId])
  @@map("whatsapp_templates")
}

model WhatsAppContact {
  id                   String    @id @default(cuid())
  organizationId       String
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Contact Details (matches Laravel contacts table structure)
  firstName            String?
  lastName             String?
  phone                String?   // Phone number
  email                String?
  avatar               String?   // Profile picture URL
  address              String?   // Text address
  
  // WhatsApp specific fields
  isBlocked            Boolean   @default(false)
  isFavorite           Boolean   @default(false)
  
  // Conversation tracking
  lastMessageAt        DateTime?
  
  // Contact grouping (for future use)
  contactGroupId       String?
  
  // Tracking
  createdBy            String?   // User who added contact
  createdByUser        User? @relation(fields: [createdBy], references: [id])
  
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relationships
  messages             WhatsAppMessage[]

  @@unique([organizationId, phone])
  @@map("whatsapp_contacts")
}

enum UserRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  LOCATION
  CONTACT
  TEMPLATE
  INTERACTIVE
  REACTION
  SYSTEM
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum TemplateCategory {
  MARKETING
  UTILITY
  AUTHENTICATION
}

enum TemplateStatus {
  PENDING
  APPROVED
  REJECTED
  DISABLED
}
